// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-connector-sdk/tree/main/cmd/paramgen

package rabbitmq

import (
	sdk "github.com/conduitio/conduit-connector-sdk"
)

func (DestinationConfig) Parameters() map[string]sdk.Parameter {
	return map[string]sdk.Parameter{
		"delivery.appID": {
			Default:     "",
			Description: "appID specifies the application that created the message.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"delivery.contentEncoding": {
			Default:     "",
			Description: "contentEncoding specifies the encoding of the message content.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"delivery.contentType": {
			Default:     "application/json",
			Description: "contentType specifies the MIME type of the message content. Defaults to \"application/json\".",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"delivery.correlationID": {
			Default:     "",
			Description: "correlationID is used to correlate RPC responses with requests.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"delivery.deliveryMode": {
			Default:     "2",
			Description: "deliveryMode indicates the message delivery mode. Non-persistent (1) or persistent (2). Default is 2 (persistent).",
			Type:        sdk.ParameterTypeInt,
			Validations: []sdk.Validation{},
		},
		"delivery.expiration": {
			Default:     "",
			Description: "expiration specifies the message expiration time, if any.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"delivery.immediate": {
			Default:     "false",
			Description: "immediate indicates if the message should be treated as immediate. If true, the message is not queued if no consumers are on the matching queue.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"delivery.mandatory": {
			Default:     "false",
			Description: "mandatory indicates if the message is mandatory. If true, tells the server to return the message if it cannot be routed to a queue.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"delivery.messageTypeName": {
			Default:     "",
			Description: "messageTypeName specifies the message type name.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"delivery.priority": {
			Default:     "0",
			Description: "priority specifies the message priority. Ranges from 0 to 9. Default is 0.",
			Type:        sdk.ParameterTypeInt,
			Validations: []sdk.Validation{
				sdk.ValidationGreaterThan{Value: -1},
				sdk.ValidationLessThan{Value: 10},
			},
		},
		"delivery.replyTo": {
			Default:     "",
			Description: "replyTo specifies the address to reply to.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"delivery.userID": {
			Default:     "",
			Description: "userID specifies the user who created the message. Useful for publishers.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"exchange.autoDelete": {
			Default:     "false",
			Description: "autoDelete indicates if the exchange will be deleted when the last queue is unbound from it.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exchange.durable": {
			Default:     "true",
			Description: "durable indicates if the exchange will survive broker restarts.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exchange.internal": {
			Default:     "false",
			Description: "internal indicates if the exchange is used for internal purposes and cannot be directly published to by a client.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exchange.name": {
			Default:     "",
			Description: "name is the name of the exchange.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"exchange.noWait": {
			Default:     "false",
			Description: "noWait indicates if the exchange should be declared without waiting for server confirmation.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exchange.type": {
			Default:     "",
			Description: "type is the type of the exchange (e.g., direct, fanout, topic, headers).",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"queue.autoDelete": {
			Default:     "false",
			Description: "autoDelete indicates if the queue will be deleted when there are no more consumers.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"queue.durable": {
			Default:     "true",
			Description: "durable indicates if the queue will survive broker restarts.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"queue.exclusive": {
			Default:     "false",
			Description: "exclusive indicates if the queue can be accessed by other connections.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"queue.name": {
			Default:     "",
			Description: "name is the name of the queue to consume from / publish to",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
		"queue.noWait": {
			Default:     "false",
			Description: "noWait indicates if the queue should be declared without waiting for server confirmation.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"routingKey": {
			Default:     "",
			Description: "routingKey is the routing key to use when publishing to an exchange",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.caCert": {
			Default:     "",
			Description: "caCert is the path to the CA certificate to use for TLS",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.clientCert": {
			Default:     "",
			Description: "clientCert is the path to the client certificate to use for TLS",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.clientKey": {
			Default:     "",
			Description: "clientKey is the path to the client key to use for TLS",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.enabled": {
			Default:     "false",
			Description: "enabled indicates if TLS should be used",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"url": {
			Default:     "",
			Description: "url is the RabbitMQ server url",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
	}
}
