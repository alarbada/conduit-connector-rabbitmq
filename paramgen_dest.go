// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-connector-sdk/tree/main/cmd/paramgen

package rabbitmq

import (
	sdk "github.com/conduitio/conduit-connector-sdk"
)

func (DestinationConfig) Parameters() map[string]sdk.Parameter {
	return map[string]sdk.Parameter{
		"caCert": {
			Default:     "",
			Description: "caCert is the path to the CA certificate to use for TLS",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"clientCert": {
			Default:     "",
			Description: "clientCert is the path to the client certificate to use for TLS",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"clientKey": {
			Default:     "",
			Description: "clientKey is the path to the client key to use for TLS",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"contentType": {
			Default:     "text/plain",
			Description: "contentType is the MIME content type of the messages written to rabbitmq",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"exchange.autoDelete": {
			Default:     "false",
			Description: "autoDelete indicates if the exchange will be deleted when the last queue is unbound from it.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exchange.durable": {
			Default:     "true",
			Description: "durable indicates if the exchange will survive broker restarts.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exchange.internal": {
			Default:     "false",
			Description: "internal indicates if the exchange is used for internal purposes and cannot be directly published to by a client.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exchange.name": {
			Default:     "",
			Description: "name is the name of the exchange.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"exchange.noWait": {
			Default:     "false",
			Description: "noWait indicates if the exchange should be declared without waiting for server confirmation.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exchange.type": {
			Default:     "",
			Description: "type is the type of the exchange (e.g., direct, fanout, topic, headers).",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"queue.autoDelete": {
			Default:     "false",
			Description: "autoDelete indicates if the queue will be deleted when there are no more consumers.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"queue.durable": {
			Default:     "true",
			Description: "durable indicates if the queue will survive broker restarts.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"queue.exclusive": {
			Default:     "false",
			Description: "exclusive indicates if the queue can be accessed by other connections.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"queue.noWait": {
			Default:     "false",
			Description: "noWait indicates if the queue should be declared without waiting for server confirmation.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"queueName": {
			Default:     "",
			Description: "queueName is the name of the queue to consume from / publish to",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
		"routingKey": {
			Default:     "",
			Description: "routingKey is the routing key to use when publishing to an exchange",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"url": {
			Default:     "",
			Description: "url is the RabbitMQ server url",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
	}
}
