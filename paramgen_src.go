// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package rabbitmq

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	SourceConfigConsumerAutoAck   = "consumer.autoAck"
	SourceConfigConsumerExclusive = "consumer.exclusive"
	SourceConfigConsumerName      = "consumer.name"
	SourceConfigConsumerNoLocal   = "consumer.noLocal"
	SourceConfigConsumerNoWait    = "consumer.noWait"
	SourceConfigQueueAutoDelete   = "queue.autoDelete"
	SourceConfigQueueDurable      = "queue.durable"
	SourceConfigQueueExclusive    = "queue.exclusive"
	SourceConfigQueueName         = "queue.name"
	SourceConfigQueueNoWait       = "queue.noWait"
	SourceConfigTlsCaCert         = "tls.caCert"
	SourceConfigTlsClientCert     = "tls.clientCert"
	SourceConfigTlsClientKey      = "tls.clientKey"
	SourceConfigTlsEnabled        = "tls.enabled"
	SourceConfigUrl               = "url"
)

func (SourceConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		SourceConfigConsumerAutoAck: {
			Default:     "false",
			Description: "AutoAck indicates if the server should consider messages acknowledged once delivered.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigConsumerExclusive: {
			Default:     "false",
			Description: "Exclusive indicates if the consumer should be exclusive.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigConsumerName: {
			Default:     "",
			Description: "Name is the name of the consumer",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigConsumerNoLocal: {
			Default:     "false",
			Description: "NoLocal indicates if the server should not deliver messages published by the same connection.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigConsumerNoWait: {
			Default:     "false",
			Description: "NoWait indicates if the consumer should be declared without waiting for server confirmation.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigQueueAutoDelete: {
			Default:     "false",
			Description: "AutoDelete indicates if the queue will be deleted when there are no more consumers.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigQueueDurable: {
			Default:     "true",
			Description: "Durable indicates if the queue will survive broker restarts.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigQueueExclusive: {
			Default:     "false",
			Description: "Exclusive indicates if the queue can be accessed by other connections.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigQueueName: {
			Default:     "",
			Description: "Name is the name of the queue to consume from / publish to",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		SourceConfigQueueNoWait: {
			Default:     "false",
			Description: "NoWait indicates if the queue should be declared without waiting for server confirmation.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigTlsCaCert: {
			Default:     "",
			Description: "CACert is the path to the CA certificate to use for TLS",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsClientCert: {
			Default:     "",
			Description: "ClientCert is the path to the client certificate to use for TLS",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsClientKey: {
			Default:     "",
			Description: "ClientKey is the path to the client key to use for TLS",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsEnabled: {
			Default:     "false",
			Description: "Enabled indicates if TLS should be used",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigUrl: {
			Default:     "",
			Description: "URL is the RabbitMQ server URL",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
